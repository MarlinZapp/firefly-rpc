//
// Autogenerated by Thrift Compiler (0.17.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./firefly_types');
import Position = ttypes.Position
import Firefly = ttypes.Firefly

declare class Client {
    private output: thrift.TTransport;
    private pClass: thrift.TProtocol;
    private _seqid: number;

    constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

    getPhaseByFireflyPosition(position: Position): Promise<number>;

    getPhaseByFireflyPosition(position: Position, callback?: (error: void, response: number)=>void): void;

    sendPhaseUpdate(firefly: Firefly): Promise<void>;

    sendPhaseUpdate(firefly: Firefly, callback?: (error: void, response: void)=>void): void;
  }

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getPhaseByFireflyPosition(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendPhaseUpdate(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
