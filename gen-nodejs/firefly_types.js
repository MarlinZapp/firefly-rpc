//
// Autogenerated by Thrift Compiler (0.17.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
const Position = module.exports.Position = class {
  constructor(args) {
    this.x = null;
    this.y = null;
    if (args) {
      if (args.x !== undefined && args.x !== null) {
        this.x = args.x;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field x is unset!');
      }
      if (args.y !== undefined && args.y !== null) {
        this.y = args.y;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field y is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I16) {
          this.x = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I16) {
          this.y = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Position');
    if (this.x !== null && this.x !== undefined) {
      output.writeFieldBegin('x', Thrift.Type.I16, 1);
      output.writeI16(this.x);
      output.writeFieldEnd();
    }
    if (this.y !== null && this.y !== undefined) {
      output.writeFieldBegin('y', Thrift.Type.I16, 2);
      output.writeI16(this.y);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Firefly = module.exports.Firefly = class {
  constructor(args) {
    this.position = null;
    this.phase = null;
    if (args) {
      if (args.position !== undefined && args.position !== null) {
        this.position = new ttypes.Position(args.position);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field position is unset!');
      }
      if (args.phase !== undefined && args.phase !== null) {
        this.phase = args.phase;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field phase is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.position = new ttypes.Position();
          this.position.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.phase = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Firefly');
    if (this.position !== null && this.position !== undefined) {
      output.writeFieldBegin('position', Thrift.Type.STRUCT, 1);
      this.position.write(output);
      output.writeFieldEnd();
    }
    if (this.phase !== null && this.phase !== undefined) {
      output.writeFieldBegin('phase', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.phase);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
